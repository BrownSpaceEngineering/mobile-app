Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduce2 = require("lodash/reduce");

var _reduce3 = _interopRequireDefault(_reduce2);

var _omit2 = require("lodash/omit");

var _omit3 = _interopRequireDefault(_omit2);

var _property2 = require("lodash/property");

var _property3 = _interopRequireDefault(_property2);

var _isFunction2 = require("lodash/isFunction");

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _defaults2 = require("lodash/defaults");

var _defaults3 = _interopRequireDefault(_defaults2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _collection = require("./collection");

var _collection2 = _interopRequireDefault(_collection);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = {
  getPoint: function getPoint(datum) {
    var exists = function exists(val) {
      return val !== undefined;
    };
    var _x = datum._x,
        _x1 = datum._x1,
        _x0 = datum._x0,
        _voronoiX = datum._voronoiX,
        _y = datum._y,
        _y1 = datum._y1,
        _y0 = datum._y0,
        _voronoiY = datum._voronoiY;

    var defaultX = exists(_x1) ? _x1 : _x;
    var defaultY = exists(_y1) ? _y1 : _y;
    var point = {
      x: exists(_voronoiX) ? _voronoiX : defaultX,
      x0: exists(_x0) ? _x0 : _x,
      y: exists(_voronoiY) ? _voronoiY : defaultY,
      y0: exists(_y0) ? _y0 : _y
    };
    return (0, _defaults3.default)({}, point, datum);
  },
  scalePoint: function scalePoint(props, datum) {
    var scale = props.scale,
        polar = props.polar;

    var d = this.getPoint(datum);
    var origin = props.origin || { x: 0, y: 0 };
    var x = scale.x(d.x);
    var x0 = scale.x(d.x0);
    var y = scale.y(d.y);
    var y0 = scale.y(d.y0);
    return {
      x: polar ? y * Math.cos(x) + origin.x : x,
      x0: polar ? y0 * Math.cos(x0) + origin.x : x0,
      y: polar ? -y * Math.sin(x) + origin.y : y,
      y0: polar ? -y0 * Math.sin(x0) + origin.x : y0
    };
  },
  formatPadding: function formatPadding(padding) {
    var paddingVal = typeof padding === "number" ? padding : 0;
    var paddingObj = typeof padding === "object" ? padding : {};
    return {
      top: paddingObj.top || paddingVal,
      bottom: paddingObj.bottom || paddingVal,
      left: paddingObj.left || paddingVal,
      right: paddingObj.right || paddingVal
    };
  },
  getPadding: function getPadding(props) {
    return this.formatPadding(props.padding);
  },
  getStyles: function getStyles(style, defaultStyles) {
    var width = "100%";
    var height = "100%";
    if (!style) {
      return (0, _defaults3.default)({ parent: { height: height, width: width } }, defaultStyles);
    }
    var data = style.data,
        labels = style.labels,
        parent = style.parent;

    var defaultParent = defaultStyles && defaultStyles.parent || {};
    var defaultLabels = defaultStyles && defaultStyles.labels || {};
    var defaultData = defaultStyles && defaultStyles.data || {};
    return {
      parent: (0, _defaults3.default)({}, parent, defaultParent, { width: width, height: height }),
      labels: (0, _defaults3.default)({}, labels, defaultLabels),
      data: (0, _defaults3.default)({}, data, defaultData)
    };
  },
  evaluateProp: function evaluateProp(prop, data, active) {
    return (0, _isFunction3.default)(prop) ? prop(data, active) : prop;
  },
  evaluateStyle: function evaluateStyle(style, data, active) {
    var _this = this;

    if (!style || !Object.keys(style).some(function (value) {
      return (0, _isFunction3.default)(style[value]);
    })) {
      return style;
    }
    return Object.keys(style).reduce(function (prev, curr) {
      prev[curr] = _this.evaluateProp(style[curr], data, active);
      return prev;
    }, {});
  },
  degreesToRadians: function degreesToRadians(degrees) {
    return degrees * (Math.PI / 180);
  },
  radiansToDegrees: function radiansToDegrees(radians) {
    return radians / (Math.PI / 180);
  },
  getRadius: function getRadius(props) {
    var _getPadding = this.getPadding(props),
        left = _getPadding.left,
        right = _getPadding.right,
        top = _getPadding.top,
        bottom = _getPadding.bottom;

    var width = props.width,
        height = props.height;

    return Math.min(width - left - right, height - top - bottom) / 2;
  },
  getPolarOrigin: function getPolarOrigin(props) {
    var width = props.width,
        height = props.height;

    var _getPadding2 = this.getPadding(props),
        top = _getPadding2.top,
        bottom = _getPadding2.bottom,
        left = _getPadding2.left,
        right = _getPadding2.right;

    var radius = Math.min(width - left - right, height - top - bottom) / 2;
    var offsetWidth = width / 2 + left - right;
    var offsetHeight = height / 2 + top - bottom;
    return {
      x: offsetWidth + radius > width ? radius + left - right : offsetWidth,
      y: offsetHeight + radius > height ? radius + top - bottom : offsetHeight
    };
  },
  getRange: function getRange(props, axis) {
    if (props.range && props.range[axis]) {
      return props.range[axis];
    } else if (props.range && Array.isArray(props.range)) {
      return props.range;
    }
    return props.polar ? this.getPolarRange(props, axis) : this.getCartesianRange(props, axis);
  },
  getCartesianRange: function getCartesianRange(props, axis) {
    var isVertical = axis !== "x";
    var padding = this.getPadding(props);
    if (isVertical) {
      return [props.height - padding.bottom, padding.top];
    }
    return [padding.left, props.width - padding.right];
  },
  getPolarRange: function getPolarRange(props, axis) {
    if (axis === "x") {
      var startAngle = this.degreesToRadians(props.startAngle || 0);
      var endAngle = this.degreesToRadians(props.endAngle || 360);
      return [startAngle, endAngle];
    }
    return [props.innerRadius || 0, this.getRadius(props)];
  },
  createAccessor: function createAccessor(key) {
    if ((0, _isFunction3.default)(key)) {
      return key;
    } else if (key === null || typeof key === "undefined") {
      return function (x) {
        return x;
      };
    }

    return (0, _property3.default)(key);
  },
  modifyProps: function modifyProps(props, fallbackProps, role) {
    var theme = props.theme && props.theme[role] ? props.theme[role] : {};
    var themeProps = (0, _omit3.default)(theme, ["style"]);
    return (0, _defaults3.default)({}, props, themeProps, fallbackProps);
  },

  getCurrentAxis: function getCurrentAxis(axis, horizontal) {
    var otherAxis = axis === "x" ? "y" : "x";
    return horizontal ? otherAxis : axis;
  },

  isVertical: function isVertical(props) {
    var orientation = props.orientation || (props.dependentAxis ? "left" : "bottom");
    var vertical = { top: false, bottom: false, left: true, right: true };
    return vertical[orientation];
  },

  stringTicks: function stringTicks(props) {
    return props.tickValues !== undefined && _collection2.default.containsStrings(props.tickValues);
  },

  reduceChildren: function reduceChildren(children, iteratee) {
    var childIndex = 0;
    var traverseChildren = function traverseChildren(childArray, parent) {
      return (0, _reduce3.default)(childArray, function (memo, child) {
        var childName = child.props.name || childIndex;
        childIndex++;
        if (child.props && child.props.children) {
          var nestedChildren = _react2.default.Children.toArray(child.props.children);
          var nestedResults = traverseChildren(nestedChildren, child);
          memo = memo.concat(nestedResults);
        } else {
          var result = iteratee(child, childName, parent);
          memo = result ? memo.concat(result) : memo;
        }
        return memo;
      }, []);
    };
    return traverseChildren(children);
  }
};