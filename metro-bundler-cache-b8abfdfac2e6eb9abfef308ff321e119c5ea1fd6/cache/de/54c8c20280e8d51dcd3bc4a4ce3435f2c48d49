Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isPlainObject2 = require("lodash/isPlainObject");

var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);

var _isEmpty2 = require("lodash/isEmpty");

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _keys2 = require("lodash/keys");

var _keys3 = _interopRequireDefault(_keys2);

var _isEqual2 = require("lodash/isEqual");

var _isEqual3 = _interopRequireDefault(_isEqual2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

exports.default = {
  isNonEmptyArray: function isNonEmptyArray(collection) {
    return Array.isArray(collection) && collection.length > 0;
  },
  containsStrings: function containsStrings(collection) {
    return Array.isArray(collection) && collection.some(function (value) {
      return typeof value === "string";
    });
  },
  containsDates: function containsDates(collection) {
    return Array.isArray(collection) && collection.some(function (value) {
      return value instanceof Date;
    });
  },
  containsNumbers: function containsNumbers(collection) {
    return Array.isArray(collection) && collection.some(function (value) {
      return typeof value === "number";
    });
  },
  containsOnlyStrings: function containsOnlyStrings(collection) {
    return this.isNonEmptyArray(collection) && collection.every(function (value) {
      return typeof value === "string";
    });
  },
  isArrayOfArrays: function isArrayOfArrays(collection) {
    return this.isNonEmptyArray(collection) && collection.every(Array.isArray);
  },
  removeUndefined: function removeUndefined(arr) {
    return arr.filter(function (el) {
      return typeof el !== "undefined";
    });
  },
  getMaxValue: function getMaxValue(arr) {
    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      values[_key - 1] = arguments[_key];
    }

    var array = arr.concat(values);
    return this.containsDates(array) ? new Date(Math.max.apply(Math, _toConsumableArray(array))) : Math.max.apply(Math, _toConsumableArray(array));
  },
  getMinValue: function getMinValue(arr) {
    for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      values[_key2 - 1] = arguments[_key2];
    }

    var array = arr.concat(values);
    return this.containsDates(array) ? new Date(Math.min.apply(Math, _toConsumableArray(array))) : Math.min.apply(Math, _toConsumableArray(array));
  },

  splitArray: function splitArray(array, delimiterFn) {
    var segmentStartIndex = 0;
    var segments = array.reduce(function (memo, item, index) {
      if (delimiterFn(item)) {
        memo = memo.concat([array.slice(segmentStartIndex, index)]);
        segmentStartIndex = index + 1;
      } else if (index === array.length - 1) {
        memo = memo.concat([array.slice(segmentStartIndex, array.length)]);
      }
      return memo;
    }, []);

    return segments.filter(function (segment) {
      return Array.isArray(segment) && segment.length > 0;
    });
  },

  allSetsEqual: function allSetsEqual(itemSets) {
    return itemSets.every(function (comparisonSet) {
      return (0, _isEqual3.default)(comparisonSet[0], comparisonSet[1]);
    });
  },

  areVictoryPropsEqual: function areVictoryPropsEqual(a, b) {
    return this.checkEquality(a, b);
  },

  checkEquality: function checkEquality(o1, o2) {
    var _this = this;

    var basicEqualityCheck = function basicEqualityCheck(a, b) {
      if (a === b) {
        return true;
      }
      if (typeof a !== typeof b) {
        return false;
      }

      if (typeof a === "function") {
        return true;
      }
      if (typeof a === "object" && (0, _keys3.default)(a).length !== (0, _keys3.default)(b).length) {
        return false;
      }
      if (typeof a !== "object" || (0, _keys3.default)(a).length === 0) {
        return (0, _isEqual3.default)(a, b);
      }
      return undefined;
    };

    var initialEquality = basicEqualityCheck(o1, o2);
    if (typeof initialEquality === "boolean") {
      return initialEquality;
    }
    return (0, _keys3.default)(o1).reduce(function (equal, key) {
      if (!equal) {
        return false;
      }
      var val1 = o1[key];
      var val2 = o2[key];
      var equality = basicEqualityCheck(val1, val2);
      if (typeof equality === "boolean") {
        return equality;
      }
      if ((0, _isPlainObject3.default)(val1)) {
        return !(0, _isPlainObject3.default)(val2) ? false : (0, _isEmpty3.default)(val1) && (0, _isEmpty3.default)(val2) || _this.checkEquality(val1, val2);
      } else if (Array.isArray(val1)) {
        return !Array.isArray(val2) ? false : (0, _isEmpty3.default)(val1) && (0, _isEmpty3.default)(val2) || _this.checkEquality(val1, val2);
      } else {
        return (0, _isEqual3.default)(val1, val2);
      }
    }, true);
  }
};